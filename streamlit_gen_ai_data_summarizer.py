# -*- coding: utf-8 -*-
"""Streamlit Gen AI Data Summarizer

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xqfqklCXX-udNZpos_aWF5xZBh53Cn6j
"""

import streamlit as st
import pandas as pd
import io
import json
import requests # For making API calls

# --- Streamlit App Configuration ---
st.set_page_config(
    page_title="Gen AI Data Summarizer",
    layout="centered",
    initial_sidebar_state="auto",
)

# --- Title and Description ---
st.title("üìä Gen AI Data Summarizer")
st.markdown(
    """
    Provide your Google Sheet link (published as CSV) and tell me your requirements.
    I'll use a Generative AI model to process the data and provide a concise summary.
    """
)

# --- Helper function to fetch CSV from Google Sheet URL ---
@st.cache_data(ttl=3600) # Cache data for 1 hour to avoid repeated fetches for the same URL
def fetch_google_sheet_csv(sheet_url: str) -> str:
    """
    Fetches CSV data from a Google Sheet URL that has been published to the web.
    """
    if not sheet_url:
        return ""

    # Google Sheets export URL pattern for CSV
    # This pattern works if the sheet is published to the web as CSV.
    # Example: https://docs.google.com/spreadsheets/d/YOUR_SHEET_ID/export?format=csv&gid=YOUR_GID
    # We need to convert the sharing URL to an export URL.
    if "docs.google.com/spreadsheets/d/" in sheet_url and "/edit" in sheet_url:
        sheet_id = sheet_url.split("/d/")[1].split("/edit")[0]
        # Assuming the first sheet (gid=0) or you can prompt for gid if needed
        export_url = f"https://docs.google.com/spreadsheets/d/1jqFnmn1_006QeuJe6ZA9FOTGbKCyLxlfLWFy_NHct2Y/edit?gid=787287576#gid=787287576"
    elif "docs.google.com/spreadsheets/d/" in sheet_url and "/export" in sheet_url and "format=csv" in sheet_url:
        # Already an export URL
        export_url = sheet_url
    else:
        st.error("üö´ Invalid Google Sheet URL format. Please provide a sharing link or a direct CSV export link.")
        return ""

    try:
        response = requests.get(export_url, timeout=10) # 10-second timeout
        response.raise_for_status() # Raise an exception for HTTP errors (4xx or 5xx)
        return response.text
    except requests.exceptions.RequestException as e:
        st.error(f"üö´ Error fetching data from Google Sheet: {e}")
        st.error("Please ensure the sheet is published to the web as CSV and the URL is correct.")
        return ""

# --- Input for Google Sheet URL ---
st.header("1. Google Sheet Link")
st.info(
    """
    **Important:** Your Google Sheet must be published to the web as a CSV file.
    Go to `File > Share > Publish to web`, select the sheet, choose `Comma-separated values (.csv)`, and click `Publish`.
    Then paste the sharing link here.
    """
)

google_sheet_url = st.text_input(
    "Paste your Google Sheet sharing link here:",
    placeholder="e.g., https://docs.google.com/spreadsheets/d/1abcdefg12345/edit#gid=0",
    key="google_sheet_url_input"
)

# --- Input for User Requirements ---
st.header("2. Your Requirements")
user_requirement = st.text_area(
    "Tell me what you want to extract or summarize from the data:",
    height=150,
    placeholder='e.g., "Summarize total sales by region", "List top 3 products by revenue", "Identify any anomalies in the data"',
    key="user_requirement_area"
)

# --- API Key (for demonstration purposes, in a real app, use environment variables) ---
GEMINI_API_KEY = "AIzaSyCn15R8V3lgXq8H8yc1GA0MqG5NaI4u144" # Canvas will provide this at runtime

# --- Generate Summary Button ---
if st.button("üöÄ Process Data & Generate Summary", type="primary"):
    if not google_sheet_url:
        st.error("üö® Please provide a Google Sheet Link.")
    elif not user_requirement:
        st.error("üö® Please provide Your Requirements.")
    else:
        with st.spinner("üîÑ Fetching data from Google Sheet..."):
            sheet_data = fetch_google_sheet_csv(google_sheet_url)

        if sheet_data:
            with st.spinner("üß† Generating summary... This might take a moment."):
                try:
                    # Construct the prompt for the LLM
                    prompt = f"""
                    You are an AI assistant that processes data from a Google Sheet and provides a concise summary based on user requirements.

                    Here is the Google Sheet data in CSV format:
                    ```
                    {sheet_data}
                    ```

                    Here are the user's requirements for processing and summarizing the data:
                    "{user_requirement}"

                    Please process the data according to the requirements and then provide a short, clear, and insightful summary of the output data. If the request implies specific data points (e.g., "top 5 products"), extract and present them. If the request is a general summary, provide a high-level overview.
                    Do not include any code blocks or CSV output in your response. Just the summary.
                    """

                    # Prepare the payload for the Gemini API
                    payload = {
                        "contents": [
                            {
                                "role": "user",
                                "parts": [{"text": prompt}]
                            }
                        ]
                    }

                    # Make the API call to Gemini
                    api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"
                    headers = {"Content-Type": "application/json"}

                    response = requests.post(api_url, headers=headers, data=json.dumps(payload))
                    response.raise_for_status() # Raise an exception for HTTP errors

                    result = response.json()

                    if result.get("candidates") and len(result["candidates"]) > 0 and \
                       result["candidates"][0].get("content") and \
                       result["candidates"][0]["content"].get("parts") and \
                       len(result["candidates"][0]["content"]["parts"]) > 0:
                        output_summary = result["candidates"][0]["content"]["parts"][0]["text"]
                        st.success("‚úÖ Summary Generated!")
                        st.subheader("Output Summary:")
                        st.markdown(output_summary)
                    else:
                        st.warning("‚ö†Ô∏è No summary generated. Please try rephrasing your requirements.")

                except requests.exceptions.RequestException as e:
                    st.error(f"üö´ API Request Error: {e}")
                    st.error("Please check your internet connection or API key.")
                except json.JSONDecodeError:
                    st.error("üö´ Failed to parse API response. Invalid JSON received.")
                except Exception as e:
                    st.error(f"An unexpected error occurred: {e}")
        else:
            st.warning("‚ö†Ô∏è Could not fetch data from the provided Google Sheet URL. Please check the URL and ensure the sheet is published to the web as CSV.")


# --- Footer ---
st.markdown("---")
st.markdown("Developed with ‚ù§Ô∏è using Streamlit and Google Gemini API.")

